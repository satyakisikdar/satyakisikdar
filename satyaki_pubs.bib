@inproceedings{Pennycuff2018,
author = {Pennycuff, Corey and Sikdar, Satyaki and Vajiac, Catalina and Chiang, David and Weninger, Tim},
booktitle = {Lecture Notes in Computer Science (including subseries Lecture Notes in Artificial Intelligence and Lecture Notes in Bioinformatics)},
doi = {10.1007/978-3-319-92991-0_2},
isbn = {9783319929903},
issn = {16113349},
keywords = {Graph generation,Hyperedge replacement,Temporal graphs},
pages = {20--36},
title = {{Synchronous hyperedge replacement graph grammars}},
url = {http://link.springer.com/10.1007/978-3-319-92991-0{\_}2},
volume = {10887 LNCS},
year = {2018}
}
@article{Basuchowdhuri2018,
abstract = {{\textcopyright} 2018 Springer-Verlag London Ltd., part of Springer Nature Finding community structures in social networks is considered to be a challenging task as many of the proposed algorithms are computationally expensive and does not scale well for large graphs. Most of the community detection algorithms proposed till date are unsuitable for applications that would require detection of communities in real time, especially for massive networks. The Louvain method, which uses modularity maximization to detect clusters, is usually considered to be one of the fastest community detection algorithms even without any provable bound on its running time. We propose a novel graph traversal-based community detection framework, which not only runs faster than the Louvain method but also generates clusters of better quality for most of the benchmark datasets. We show that our algorithms run in (Formula presented.) time to create an initial cover before using modularity maximization to get the final cover.},
author = {Basuchowdhuri, P. and Sikdar, S. and Nagarajan, V. and Mishra, K. and Gupta, S. and Majumder, S.},
doi = {10.1007/s10115-018-1209-7},
issn = {02193116},
journal = {Knowledge and Information Systems},
keywords = {Brokers,Communities,Community detection,Community nodes,Influenced Neighbor Score},
title = {{Fast detection of community structures using graph traversal in social networks}},
year = {2018}
}
@article{Basuchowdhuri2016,
abstract = {Community structures are inherent in social networks and finding them is an interesting and well-studied problem. Finding community structures in social networks is similar to locating densely connected clusters of nodes in a graph. One of the popular methods for finding communities is to first find the inter-community edges and then removing them to reveal the communities. It is well-known that a network centrality measure named edge betweenness can be used to detect the inter-community edges. The edges with high edge betweenness are those that fall in a large number of shortest paths out of all possible pairs of shortest paths. Finding all-pair shortest paths is a computationally expensive task, es-pecially for large-sized graphs. So we construct a t-spanner, a known graph sparsification technique, for finding edges with high betweenness and eventually find communities by removing such edges. Using the t-spanner, we then detect the inter-community edges within O(km) running time by building a distance oracle of size O(kn 1+ 1 k), where t = 2k-1. Compared to the traditional community detection methods dependent on calculation of betweenness values, our algo-rithm runs much faster. Experiments show that our algo-rithm finds communities of quality comparable to the other state-of-the-art community detection algorithms.},
author = {Basuchowdhuri, Partha and Sikdar, Satyaki and Shreshtha, Sonu and Majumder, Subhashis},
doi = {10.1145/2888451.2888479},
isbn = {978-1-4503-4217-9},
journal = {Proceedings of the 3rd IKDD Conference on Data Science, 2016},
keywords = {Community Detection,Modularity Maximization,Social networks,Spanner Construction,community detection,social network analysis,spanner,sparsification},
mendeley-tags = {community detection,social network analysis,spanner,sparsification},
pages = {5:1----5:9},
title = {{Detecting Community Structures in Social Networks by Graph Sparsification}},
url = {http://doi.acm.org/10.1145/2888451.2888479},
year = {2016}
}
